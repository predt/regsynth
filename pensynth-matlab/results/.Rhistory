data = data.frame("draw"=data)
ggplot(data, aes(x=draw)) +
geom_histogram(binwidth = .002, alpha=.5, position='identity',fill="steelblue", aes(y = ..density..)) +
scale_x_continuous(limits=c(X_j,1), name="u") +
ggtitle("Distribution of NN on the right") +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.position="none")
n1=20
n0=10*n1
p=5
d = c(rep(1,n1),rep(0,n0))
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
X0 = matrix(rnorm(n0*p), ncol=p, nrow=n0)
X = rbind(X1,X0)
delta=2
X = X^delta
X = rbind(matrix(runif(n1*p), ncol=p, nrow=n1),
matrix(rnorm(n0*p), ncol=p, nrow=n0))
X = X^delta
.964^2
d = c(rep(1,n1),rep(0,n0))
X = rbind(matrix(runif(n1*p), ncol=p, nrow=n1),
matrix(rnorm(n0*p), ncol=p, nrow=n0))
# Treated ~ uniform density [0;1]
# Controls ~ N(0,1) density
# all iid (across i and j)
### Create outcome function
beta = rep(1,p)
# normalize the part in X
y = (X^delta)%*%beta  + rnorm(n1+n0,sd=sigma)
d = c(rep(1,n1),rep(0,n0))
X = rbind(matrix(runif(n1*p), ncol=p, nrow=n1),
matrix(rnorm(n0*p), ncol=p, nrow=n0))
# Treated ~ uniform density [0;1]
# Controls ~ N(0,1) density
# all iid (across i and j)
### Create outcome function
beta = rep(1,p)
# normalize the part in X
y = (X^delta)%*%beta  + rnorm(n1+n0)
v = 1/(2+delta) - 1/(1+delta)^2
v
v = p/(2+delta) - p/(1+delta)^2
v = p/(2+delta) - p/(1+delta)^2
v
n1 = 1000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X^delta)%*%beta
print(sd(y)^2)
n1 = 1000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X^delta)%*%beta
print(sd(y)^2)
n1 = 1000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X^delta)%*%beta
print(sd(y)^2)
n1 = 1000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X^delta)%*%beta
print(sd(y)^2)
length(y)
n1 = 1000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
n1 = 1000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y)^2)
n1 = 1000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y)^2)
n1 = 1000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y)^2)
n1 = 1000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y)^2)
n1 = 1000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y)^2)
n1 = 1000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y)^2)
n1 = 1000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y)^2)
v
n1 = 1000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(var(y)
)
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(var(y))
v = p/(2+delta) - p/(1+delta)^2
v
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(var(y))
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(var(y))
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(var(y))
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(var(y))
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(var(y))
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(var(y))
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(var(y))
v
v = sqrt(p/(2+delta) - p/(1+delta)^2)
v
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
v
v
delta
p/(1+delta)^2
1/(1+delta)^2
1/(1+1)^2
1/(1+2)^2
rm(list=ls())
set.seed(3101990)
n1=10000
n1 = 10000
p=1
delta=1
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=1; beta = rep(1,p)
delta=1
v = sqrt(p/(2+delta) - p/(1+delta)^2)
v
1/12
1/sqrt(12)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
print(sd(y))
print(sd(y))
print(sd(y))
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=1
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=1
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=1
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=1
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=1
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=4
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=4
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=4
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=4
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=4
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=4
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=4
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=5
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=5
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=5
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=5
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=5
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=5
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=5
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=5
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=5
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=5
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=5
v = sqrt(p/(2+delta) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=5
v = sqrt(p/(2*delta+1) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=5
v = sqrt(p/(2*delta+1) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=5
v = sqrt(p/(2*delta+1) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=3
v = sqrt(p/(2*delta+1) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=3
v = sqrt(p/(2*delta+1) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3; beta = rep(1,p)
delta=3
v = sqrt(p/(2*delta+1) - p/(1+delta)^2)
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3;
delta=3
stdev = sqrt(p/(2*delta+1) - p/(1+delta)^2) # normalize the part in X
beta = rep(1,p)/stdev
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3;
delta=3
stdev = sqrt(p/(2*delta+1) - p/(1+delta)^2) # normalize the part in X
beta = rep(1,p)/stdev
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3;
delta=3
stdev = sqrt(p/(2*delta+1) - p/(1+delta)^2) # normalize the part in X
beta = rep(1,p)/stdev
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3;
delta=3
stdev = sqrt(p/(2*delta+1) - p/(1+delta)^2) # normalize the part in X
beta = rep(1,p)/stdev
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3;
delta=3
stdev = sqrt(p/(2*delta+1) - p/(1+delta)^2) # normalize the part in X
beta = rep(1,p)/stdev
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3;
delta=3
stdev = sqrt(p/(2*delta+1) - p/(1+delta)^2) # normalize the part in X
beta = rep(1,p)/stdev
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3;
delta=3
stdev = sqrt(p/(2*delta+1) - p/(1+delta)^2) # normalize the part in X
beta = rep(1,p)/stdev
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3;
delta=3
stdev = sqrt(p/(2*delta+1) - p/(1+delta)^2) # normalize the part in X
beta = rep(1,p)/stdev
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
n1 = 10000
p=3;
delta=3
stdev = sqrt(p/(2*delta+1) - p/(1+delta)^2) # normalize the part in X
beta = rep(1,p)/stdev
X1 = matrix(runif(n1*p), ncol=p, nrow=n1)
y = (X1^delta)%*%beta
print(sd(y))
PolyDGP <- function(n1=25,n0=50,p=3,delta=2){
d = c(rep(1,n1),rep(0,n0))
X = rbind(matrix(runif(n1*p), ncol=p, nrow=n1),
matrix(rnorm(n0*p), ncol=p, nrow=n0))
# Treated ~ uniform density [0;1]
# Controls ~ N(0,1) density
# all iid (across i and j)
### Create outcome function
stdev = sqrt(p/(2*delta+1) - p/(1+delta)^2)
beta = rep(1,p)/stdev # normalize the part in X
y = (X^delta)%*%beta  + rnorm(n1+n0)
return(list(X=X,
y=y,
d=d))
}
PolyDGP(6,10,6,7)
10000/60
166/60
6*2,8
6*2.8
setwd("/Users/jeremylhour/Downloads/pensynth-matlab/results/")
rm(list=ls())
### Load packages
library("MASS")
library("xtable")
k_rng = c(2,5,10,15,30,50)
r_rng = c(1,1.2,1.5,1.8,2,2.2,2.5)
read.table("n1_10_n0_100_k_10_r_1_1090_10_T_1000.txt", header = FALSE, sep = "", dec = ".")
read.table("n1_10_n0_100_k_10_r_1_1090_10_T_1000.txt", header = TRUE, sep = "", dec = ".")
AA = read.table("n1_10_n0_100_k_10_r_1_1090_10_T_1000.txt", header = TRUE, sep = "", dec = ".")
AA[1,3]
AA[1,3]*12
1682.28-177.65-18.85
3346.93-1485.78
1861.15/3346.93
2136.82-225.65-18.85
1-1892.32/3700
