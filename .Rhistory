setwd("//ulysse/users/JL.HOUR/1A_These/A. Research/RegSynthProject/regsynth")
rm(list=ls())
set.seed(3101990)
### Load packages
library("MASS")
library("ggplot2")
library("gtable")
library("grid")
library("reshape2")
library("LowRankQP")
### Load user functions
source("functions/wsol.R")
source("functions/wsoll1.R")
source("functions/matchDGP.R")
source("functions/wATT.R")
source("functions/matching.R")
source("functions/matchest.R")
source("functions/OBest.R")
source("functions/regsynth.R")
source("functions/regsynthpath.R")
source("functions/TZero.R")
source("functions/synthObj.R")
source("simulations/MCXP_setup.R")
### min-max scale
mMscale <- function(X){
X = as.matrix(X)
mins = apply(X,2,min)
maxs = apply(X,2,max)
return(scale(X, center=mins, scale=maxs-mins))
}
# Load data
library("causalsens")
data(lalonde.psid)
d = lalonde.psid[,"treat"]
y = lalonde.psid[,"re78"]
X = data.frame(lalonde.psid[,c("age","education","married","black","hispanic","re74","re75","nodegree")],
"NoIncome74"=as.numeric(lalonde.psid[,"re74"]==0),
"NoIncome75"=as.numeric(lalonde.psid[,"re75"]==0)
)
X[,c("age","education","re74","re75")] = mMscale(X[,c("age","education","re74","re75")])
X = as.matrix(X)
### Run Synthetic Control
X0 = t(X[d==0,])
X1 = t(X[d==1,])
V = diag(ncol(X))
set.seed(12071990)
lambda = seq(0,2,.01) # set of lambda to be considered for optim
K = 5 # number of folds for optimal penalty level
R = 1000
n = 100
Results = matrix(nrow=R,ncol=6)
t_start <- Sys.time()
pb <- txtProgressBar(style = 3)
for(r in 1:R){
draw = sample(1:nrow(X),n)
Xr = X[draw,]
dr = d[draw]
yr = y[draw]
X0 = t(Xr[dr==0,])
X1 = t(Xr[dr==1,])
V = diag(ncol(X))
### 2. SC on the mean
M = matrix(apply(X1,1,mean), ncol=1)
sol_mSC = wsol(X0,M,V)
### 2. SC on each unit
cf = vector(length = sum(dr))
for(i in 1:sum(dr)){
sol = wsol(X0,X1[,i],V)
cf[i] = t(yr[dr==0])%*%sol
}
attSCu <- mean(yr[dr==1] - cf)
### 3. 1NN matching
cf = vector(length = sum(dr))
for(i in 1:sum(dr)){
sol = matching(X0,X1[,i],V,m=1)
cf[i] = t(yr[dr==0])%*%sol
}
attm1 <- mean(yr[dr==1] - cf)
### 4. 5NN matching
cf = vector(length = sum(dr))
for(i in 1:sum(dr)){
sol = matching(X0,X1[,i],V,m=5)
cf[i] = t(yr[dr==0])%*%sol
}
attm5 <- mean(yr[dr==1] - cf)
### 5. Sparse Synthetic Control, on mean
sol_SparsemSC = wsoll1(X0,M,V,.1) # Penalty originally set to .1
### 6. Sparse Synthetic Control, on each unit
cf = vector(length = sum(dr))
for(i in 1:sum(dr)){
sol = wsoll1(X0,X1[,i],V,.1)
cf[i] = t(yr[dr==0])%*%sol
}
attSparseSCu <- mean(yr[dr==1] - cf)
### 6. Third step: ATT estimation
Results[r,] <- c(wATT(yr,dr,sol_mSC),
attSCu,
attm1,
attm5,
wATT(yr,dr,sol_SparsemSC),
attSparseSCu)
setTxtProgressBar(pb, r/R)
}
close(pb)
print(Sys.time()-t_start)
R = 1000
n = 100
Results = matrix(nrow=R,ncol=6)
t_start <- Sys.time()
pb <- txtProgressBar(style = 3)
for(r in 1:R){
draw = sample(1:nrow(X),n)
Xr = X[draw,]
dr = d[draw]
yr = y[draw]
X0 = t(Xr[dr==0,])
X1 = t(Xr[dr==1,])
V = diag(ncol(X))
### 2. SC on the mean
M = matrix(apply(X1,1,mean), ncol=1)
sol_mSC = wsol(X0,M,V)
### 2. SC on each unit
cf = vector(length = sum(dr))
for(i in 1:sum(dr)){
sol = wsol(X0,X1[,i],V)
cf[i] = t(yr[dr==0])%*%sol
}
attSCu <- mean(yr[dr==1] - cf)
### 3. 1NN matching
cf = vector(length = sum(dr))
for(i in 1:sum(dr)){
sol = matching(X0,X1[,i],V,m=1)
cf[i] = t(yr[dr==0])%*%sol
}
attm1 <- mean(yr[dr==1] - cf)
### 4. 5NN matching
cf = vector(length = sum(dr))
for(i in 1:sum(dr)){
sol = matching(X0,X1[,i],V,m=5)
cf[i] = t(yr[dr==0])%*%sol
}
attm5 <- mean(yr[dr==1] - cf)
### 5. Sparse Synthetic Control, on mean
sol_SparsemSC = wsoll1(X0,M,V,.1) # Penalty originally set to .1
### 6. Sparse Synthetic Control, on each unit
cf = vector(length = sum(dr))
for(i in 1:sum(dr)){
sol = wsoll1(X0,X1[,i],V,.1)
cf[i] = t(yr[dr==0])%*%sol
}
attSparseSCu <- mean(yr[dr==1] - cf)
### 6. Third step: ATT estimation
Results[r,] <- c(wATT(yr,dr,sol_mSC),
attSCu,
attm1,
attm5,
wATT(yr,dr,sol_SparsemSC),
attSparseSCu)
setTxtProgressBar(pb, r/R)
}
close(pb)
print(Sys.time()-t_start)
