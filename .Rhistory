setwd("//ulysse/users/JL.HOUR/1A_These/A. Research/RegSynthProject/regsynth")
rm(list=ls())
### 0. Settings
### Load packages
library("MASS")
library("ggplot2")
library("gtable")
library("grid")
library("reshape2")
library("LowRankQP")
library("xtable")
### Load user functions
source("functions/wsol.R")
source("functions/wsoll1.R")
source("functions/matchDGP.R")
source("functions/wATT.R")
source("functions/matching.R")
source("functions/matchest.R")
source("functions/OBest.R")
source("functions/regsynth.R")
source("functions/regsynthpath.R")
source("functions/TZero.R")
source("functions/synthObj.R")
source("simulations/MCXP_setup.R")
### MC XP
set.seed(12071990)
lambda = seq(0,2,.01) # set of lambda to be considered for optim
K = 5 # number of folds for optimal penalty level
R=1000
n=30
p=3
Results <- matrix(ncol=8, nrow=R)
t_start <- Sys.time()
pb <- txtProgressBar(style = 3)
for(r in 1:R){
### 0. Generate data
data = matchDGP(n=n,p=p,Ry=.5,Rd=.2)
X = data$X; y = data$y; d = data$d
X0 = t(X[d==0,]); X1 = t(X[d==1,]); V = diag(ncol(X))
Y0 = y[d==0]; Y1 = y[d==1]; n0 = sum(1-d)
### 1. Synthetic Control on mean of treated
M = matrix(apply(X1,1,mean), ncol=1)
AggSC = wATT(y,d,wsol(X0,M,V))
### 2. 1NN matching
NN1 = matchest(d,X,y,V,1)
### 3. 5NN matching
NN5 = matchest(d,X,y,V,5)
### 4. Oaxaca-Blinder
OB = OBest(d,X,y)
### 5. Regularized Synthetic Control, fixed lambda
sol = regsynth(X0,X1,Y0,Y1,V,.1)
RSC.fixed = sol$ATT
### 6. Regularized SC, optimized lambda
uu=0 # reshuffle groups until no empty group
while(uu==0){
allocation = sample(1:K,n0,replace=T)
uu=min(mapply(function(x) sum(allocation==x),1:K))
}
print("*** PROGRESS ***")
print(100*r/R)
keeptau = matrix(nrow=length(lambda), ncol=length(Y0))
for(k in 1:K){
X1k = as.matrix(X0[,allocation==k])
X0k = as.matrix(X0[,allocation!=k])
Y1k = Y0[allocation==k]
Y0k = Y0[allocation!=k]
solpath = regsynthpath(X0k,X1k,Y0k,Y1k,V,lambda)
keeptau[,allocation==k] = solpath$CATT
}
# The one that optimizes RMSE
curve.RMSE = apply(keeptau^2,1,sum)/n0
lambda.opt.RMSE = min(lambda[which(curve.RMSE==min(curve.RMSE))])
sol = regsynth(X0,X1,Y0,Y1,V,lambda.opt.RMSE)
RSC.opt.RMSE = sol$ATT
# The one that optimizes bias
curve.bias = abs(apply(keeptau,1,sum)/n0)
lambda.opt.bias = min(lambda[which(curve.bias==min(curve.bias))])
sol = regsynth(X0,X1,Y0,Y1,V,lambda.opt.bias)
RSC.opt.bias = sol$ATT
# The one that optimizes bias + variance
curve.crit = curve.bias + apply(keeptau,1,sd)
lambda.opt.crit = min(lambda[which(curve.crit==min(curve.crit))])
sol = regsynth(X0,X1,Y0,Y1,V,lambda.opt.crit)
RSC.opt.crit = sol$ATT
### 7. Third step: ATT estimation
Results[r,] <- c(AggSC,NN1$ATT,NN5$ATT, OB$ATT,
RSC.fixed,RSC.opt.RMSE,RSC.opt.bias,RSC.opt.crit)
setTxtProgressBar(pb, r/R)
}
close(pb)
print(Sys.time()-t_start)
### Compute bias and RMSE
StatDisplay <- data.frame()
StatDisplay[1:8,"bias"] <- apply(Results,2,mean)
StatDisplay[1:8,"RMSE"]  <- sqrt(apply(Results^2,2,mean))
StatDisplay[1:8,"ShapiroTest"]  <- apply(Results,2, function(x) shapiro.test(x)$p.value)
row.names(StatDisplay) <- c("Aggregate Synth","1NN Matching","5NN Matching","Oaxaca-Blinder","Penalized Synth fixed",
"Penalized Synth RMSE opt","Penalized Synth bias opt","Penalized Synth crit opt")
print(StatDisplay)
fileN = paste("simulations/output_n",n,",p",p,".txt",sep="")
print.xtable(xtable(StatDisplay, digits=3),type="latex",file=fileN)
write(c(paste("Nb. observations:",n),
paste("Nb. covariates:",p),
paste("Nb. replications:",R),
paste(Sys.time())), fileN, append=TRUE)
