alt.y<-rnorm(300, mean=carrier/2)
# T test
t.test(null.y~carrier, var.equal=TRUE)
t.test(alt.y~carrier, var.equal=TRUE)
# Permutation test
null.diff<-mean(null.y[carrier==1])-mean(null.y[carrier==0])
alt.diff<-mean(alt.y[carrier==1])-mean(alt.y[carrier==0])
one.test <- function(x,y) {
xstar<-sample(x)
mean(y[xstar==1])-mean(y[xstar==0])
}
many.truenull <- replicate(1000, one.test(carrier, null.y))
many.truenull
d
sample(d)
sample(d)
sol1 = regsynth(X0,X1,y[d==0],y[d==1],V,.1)
print(sol1$ATT)
### 3. Inference based on Permutation Tests
# Reshuffle the treatment
permutation.test = function(d,X,y,V,lambda){
dstar = sample(d)
X0 = t(X[dstar==0,]); X1 = t(X[dstar==1,]);
Y0 = y[dstar==0]; Y1 = y[dstar==1];
solstar = regsynth(X0,X1,Y0,y1,V,lambda)
return(solstar$ATT)
}
permutation.test(d,X,y,V,.1)
permutation.test = function(d,X,y,V,lambda){
dstar = sample(d)
X0 = t(X[dstar==0,]); X1 = t(X[dstar==1,]);
Y0 = y[dstar==0]; Y1 = y[dstar==1];
solstar = regsynth(X0,X1,Y0,Y1,V,lambda)
return(solstar$ATT)
}
permutation.test(d,X,y,V,.1)
close(f)
sink()
permutation.test = function(d,X,y,V,lambda){
dstar = sample(d)
X0 = t(X[dstar==0,]); X1 = t(X[dstar==1,]);
Y0 = y[dstar==0]; Y1 = y[dstar==1];
solstar = regsynth(X0,X1,Y0,Y1,V,lambda)
return(solstar$ATT)
}
permutation.test(d,X,y,V,.1)
permutation.test = function(d,X,y,V,lambda){
dstar = sample(d)
X0 = t(X[dstar==0,]); X1 = t(X[dstar==1,]);
Y0 = y[dstar==0]; Y1 = y[dstar==1];
solstar = regsynth(X0,X1,Y0,Y1,V,lambda)
return(solstar$ATT)
}
permutation.test(d,X,y,V,.1)
permutation.test = function(d,X,y,V,lambda){
dstar = sample(d)
X0 = t(X[dstar==0,]); X1 = t(X[dstar==1,]);
Y0 = y[dstar==0]; Y1 = y[dstar==1];
solstar = regsynth(X0,X1,Y0,Y1,V,lambda)
return(solstar$ATT)
}
permutation.test(d,X,y,V,.1)
permutation.test = function(d,X,y,V,lambda){
dstar = sample(d)
X0 = t(X[dstar==0,]); X1 = t(X[dstar==1,]);
Y0 = y[dstar==0]; Y1 = y[dstar==1];
solstar = regsynth(X0,X1,Y0,Y1,V,lambda)
return(solstar$ATT)
}
permutation.test(d,X,y,V,.1)
permutation.test = function(d,X,y,V,lambda){
dstar = sample(d)
X0 = t(X[dstar==0,]); X1 = t(X[dstar==1,]);
Y0 = y[dstar==0]; Y1 = y[dstar==1];
solstar = regsynth(X0,X1,Y0,Y1,V,lambda)
return(solstar$ATT)
}
permutation.test(d,X,y,V,.1)
permutation.test = function(d,X,y,V,lambda){
dstar = sample(d)
X0 = t(X[dstar==0,]); X1 = t(X[dstar==1,]);
Y0 = y[dstar==0]; Y1 = y[dstar==1];
solstar = regsynth(X0,X1,Y0,Y1,V,lambda)
return(solstar$ATT)
}
permutation.test(d,X,y,V,.1)
permutation.test = function(d,X,y,V,lambda){
dstar = sample(d)
X0 = t(X[dstar==0,]); X1 = t(X[dstar==1,]);
Y0 = y[dstar==0]; Y1 = y[dstar==1];
solstar = regsynth(X0,X1,Y0,Y1,V,lambda)
return(solstar$ATT)
}
permutation.test(d,X,y,V,.1)
permutation.test = function(d,X,y,V,lambda){
dstar = sample(d)
X0 = t(X[dstar==0,]); X1 = t(X[dstar==1,]);
Y0 = y[dstar==0]; Y1 = y[dstar==1];
solstar = regsynth(X0,X1,Y0,Y1,V,lambda)
return(solstar$ATT)
}
permutation.test(d,X,y,V,.1)
permutation.test = function(d,X,y,V,lambda){
dstar = sample(d)
X0 = t(X[dstar==0,]); X1 = t(X[dstar==1,]);
Y0 = y[dstar==0]; Y1 = y[dstar==1];
solstar = regsynth(X0,X1,Y0,Y1,V,lambda)
return(solstar$ATT)
}
permutation.test(d,X,y,V,.1)
permutation.test = function(d,X,y,V,lambda){
dstar = sample(d)
X0 = t(X[dstar==0,]); X1 = t(X[dstar==1,]);
Y0 = y[dstar==0]; Y1 = y[dstar==1];
solstar = regsynth(X0,X1,Y0,Y1,V,lambda)
return(solstar$ATT)
}
permutation.test(d,X,y,V,.1)
permutation.test = function(d,X,y,V,lambda){
dstar = sample(d)
X0 = t(X[dstar==0,]); X1 = t(X[dstar==1,]);
Y0 = y[dstar==0]; Y1 = y[dstar==1];
solstar = regsynth(X0,X1,Y0,Y1,V,lambda)
return(solstar$ATT)
}
permutation.test(d,X,y,V,.1)
perm.test = replicate(1000, permutation.iter(d,X,y,V,.1))
permutation.iter = function(d,X,y,V,lambda){
dstar = sample(d)
X0 = t(X[dstar==0,]); X1 = t(X[dstar==1,]);
Y0 = y[dstar==0]; Y1 = y[dstar==1];
solstar = regsynth(X0,X1,Y0,Y1,V,lambda)
return(solstar$ATT)
}
perm.test = replicate(1000, permutation.iter(d,X,y,V,.1))
perm.test
perm.test = data.frame(val=perm.test)
perm.test
plot_res <- ggplot(perm.test, aes(x=val)) +
geom_histogram(binwidth = .02, alpha=.5, position='identity',fill="steelblue", aes(y = ..density..)) +
scale_x_continuous(limits=c(lb,ub), name="Estimated ATET") +
ggtitle(Distribution of permutated ATETs) +
stat_function(fun = dnorm, args=list(mean=0, sd=sd(perm.test$val)), colour="darkorchid3", size=1) +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.position="none")
ggplot(perm.test, aes(x=val)) +
geom_histogram(binwidth = .02, alpha=.5, position='identity',fill="steelblue", aes(y = ..density..)) +
scale_x_continuous(limits=c(lb,ub), name="Estimated ATET") +
ggtitle("Distribution of permutated ATETs") +
stat_function(fun = dnorm, args=list(mean=0, sd=sd(perm.test$val)), colour="darkorchid3", size=1) +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.position="none")
ggplot(perm.test, aes(x=val)) +
geom_histogram(binwidth = .02, alpha=.5, position='identity',fill="steelblue", aes(y = ..density..)) +
scale_x_continuous(name="Estimated ATET") +
ggtitle("Distribution of permutated ATETs") +
stat_function(fun = dnorm, args=list(mean=0, sd=sd(perm.test$val)), colour="darkorchid3", size=1) +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.position="none")
ggplot(perm.test, aes(x=val)) +
geom_histogram(binwidth = .2, alpha=.5, position='identity',fill="steelblue", aes(y = ..density..)) +
scale_x_continuous(name="Estimated ATET") +
ggtitle("Distribution of permutated ATETs") +
stat_function(fun = dnorm, args=list(mean=0, sd=sd(perm.test$val)), colour="darkorchid3", size=1) +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.position="none")
ggplot(perm.test, aes(x=val)) +
geom_histogram(binwidth = .06, alpha=.5, position='identity',fill="steelblue", aes(y = ..density..)) +
scale_x_continuous(name="Estimated ATET") +
ggtitle("Distribution of permutated ATETs") +
stat_function(fun = dnorm, args=list(mean=0, sd=sd(perm.test$val)), colour="darkorchid3", size=1) +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.position="none")
ggplot(perm.test, aes(x=val)) +
geom_histogram(binwidth = .06, alpha=.5, position='identity',fill="steelblue", aes(y = ..density..)) +
scale_x_continuous(name="Estimated ATET") +
ggtitle("Distribution of permutated ATETs") +
geom_vline(xintercept = sol1$ATT, colour="darkorchid3", size=1) +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.position="none")
print(sol1$ATT)
mean(sol1$ATT > perm.tes$val)
mean(sol1$ATT > perm.test$val)
mean(sol1$ATT < perm.test$val)
perm.test = replicate(10000, permutation.iter(d,X,y,V,.1))
p.val = mean(sol1$ATT < perm.test)
p.val
p.val = (sum(sol1$ATT < perm.test)+1)/10001
p.val
perm.test = data.frame(val=perm.test)
ggplot(perm.test, aes(x=val)) +
geom_histogram(binwidth = .06, alpha=.5, position='identity',fill="steelblue", aes(y = ..density..)) +
scale_x_continuous(name="Estimated ATET") +
ggtitle("Distribution of permutated ATETs") +
geom_vline(xintercept = sol1$ATT, colour="darkorchid3", size=1) +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.position="none")
? replicate
### Penalized Synthetic Control
### Inference and permutation tests
### Jeremy L Hour
### 8 septembre 2016
setwd("//ulysse/users/JL.HOUR/1A_These/A. Research/RegSynthProject/regsynth")
rm(list=ls())
### 0. Settings
### Load packages
library("MASS")
library("ggplot2")
library("gtable")
library("grid")
library("reshape2")
library("LowRankQP")
### Load user functions
source("functions/wsol.R")
source("functions/wsoll1.R")
source("functions/matchDGP.R")
source("functions/wATT.R")
source("functions/matching.R")
source("functions/matchest.R")
source("functions/regsynth.R")
source("functions/regsynthpath.R")
source("functions/TZero.R")
source("functions/synthObj.R")
source("functions/perm.test.R")
### MC XP
set.seed(12071990)
### 0. Generate data
data = matchDGP(n=100,p=10,Ry=.5,Rd=.2,a=1)
X = data$X; y = data$y; d = data$d
X0 = t(X[d==0,]); X1 = t(X[d==1,]); V = diag(ncol(X))
Y0 = y[d==0]; Y1 = y[d==1]; n0 = sum(1-d)
### SKIP THIS PART; BEGIN
### 1. Selection of the penalty level
lambda = seq(0,2,.01)
K=5
uu=0 # reshuffle groups until no empty group
while(uu==0){
allocation = sample(1:K,n0,replace=T)
uu=min(mapply(function(x) sum(allocation==x),1:K))
}
keeptau = matrix(nrow=length(lambda), ncol=length(Y0))
for(k in 1:K){
X1k = as.matrix(X0[,allocation==k])
X0k = as.matrix(X0[,allocation!=k])
Y1k = Y0[allocation==k]
Y0k = Y0[allocation!=k]
solpath = regsynthpath(X0k,X1k,Y0k,Y1k,V,lambda)
keeptau[,allocation==k] = solpath$CATT
}
# The one that optimizes RMSE
curve.RMSE = apply(keeptau^2,1,sum, na.rm=T)/n0
lambda.opt.RMSE = lambda[which(curve.RMSE==min(curve.RMSE))]
plot(lambda,curve.RMSE)
### 2. Compute ATET on the original sample
sol1 = regsynth(X0,X1,y[d==0],y[d==1],V,.1)
print(sol1$ATT)
ptest = perm.test(d,y,X,V,.1,R=1000)
ptest
(sum(ptest$theta.hat < ptest.theta.reshuffled)+1)/1001
(sum(ptest$theta.hat < ptest$theta.reshuffled)+1)/1001
perm.test = data.frame(val=ptest$theta.reshuffled)
ggplot(perm.test, aes(x=val)) +
geom_histogram(binwidth = .06, alpha=.5, position='identity',fill="steelblue", aes(y = ..density..)) +
scale_x_continuous(name="Estimated ATET") +
ggtitle("Distribution of permutated ATETs") +
geom_vline(xintercept = ptest$theta.val, colour="darkorchid3", size=1) +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.position="none")
ptest$theta.val
ptest$theta.hat
ggplot(perm.test, aes(x=val)) +
geom_histogram(binwidth = .06, alpha=.5, position='identity',fill="steelblue", aes(y = ..density..)) +
scale_x_continuous(name="Estimated ATET") +
ggtitle("Distribution of permutated ATETs") +
geom_vline(xintercept = ptest$theta.hat, colour="darkorchid3", size=1) +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.position="none")
### Penalized Synthetic Control
### Inference and permutation tests
### Jeremy L Hour
### 8 septembre 2016
setwd("//ulysse/users/JL.HOUR/1A_These/A. Research/RegSynthProject/regsynth")
rm(list=ls())
### 0. Settings
### Load packages
library("MASS")
library("ggplot2")
library("gtable")
library("grid")
library("reshape2")
library("LowRankQP")
### Load user functions
source("functions/wsol.R")
source("functions/wsoll1.R")
source("functions/matchDGP.R")
source("functions/wATT.R")
source("functions/matching.R")
source("functions/matchest.R")
source("functions/regsynth.R")
source("functions/regsynthpath.R")
source("functions/TZero.R")
source("functions/synthObj.R")
source("functions/perm.test.R")
### 0. Generate data
data = matchDGP(n=100,p=10,Ry=.5,Rd=.2,a=1)
X = data$X; y = data$y; d = data$d
X0 = t(X[d==0,]); X1 = t(X[d==1,]); V = diag(ncol(X))
Y0 = y[d==0]; Y1 = y[d==1]; n0 = sum(1-d)
### 2. Compute ATET on the original sample
sol1 = regsynth(X0,X1,y[d==0],y[d==1],V,.1)
print(sol1$ATT)
### 3. Inference based on Permutation Tests
# Reshuffle the treatment
ptest = perm.test(d,y,X,V,.1,R=1000)
p.val = (sum(ptest$theta.hat < ptest$theta.reshuffled)+1)/1001
perm.test = data.frame(val=ptest$theta.reshuffled)
ggplot(perm.test, aes(x=val)) +
geom_histogram(binwidth = .06, alpha=.5, position='identity',fill="steelblue", aes(y = ..density..)) +
scale_x_continuous(name="Estimated ATET") +
ggtitle("Distribution of permutated ATETs") +
geom_vline(xintercept = ptest$theta.hat, colour="darkorchid3", size=1) +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.position="none")
p.val
sol1$p.val
ptest$p.val
### 4. A Monte Carlo experiment
set.seed(12071990)
R = 1000
Results <- matrix(ncol=1, nrow=R)
t_start <- Sys.time()
pb <- txtProgressBar(style = 3)
for(r in 1:R){
### 0. Generate data
data = matchDGP(n=50,p=5,Ry=.5,Rd=.2)
X = data$X; y = data$y; d = data$d
V = diag(ncol(X))
### Perform test
ptest = perm.test(d,y,X,V,.1,R=1000)
### 6. Third step: ATT estimation
Results[r,] <- c(ptest.p.val)
setTxtProgressBar(pb, r/R)
}
close(pb)
print(Sys.time()-t_start)
### Penalized Synthetic Control
### Inference and permutation tests
### Jeremy L Hour
### 8 septembre 2016
setwd("//ulysse/users/JL.HOUR/1A_These/A. Research/RegSynthProject/regsynth")
rm(list=ls())
### 0. Settings
### Load packages
library("MASS")
library("ggplot2")
library("gtable")
library("grid")
library("reshape2")
library("LowRankQP")
### Load user functions
source("functions/wsol.R")
source("functions/wsoll1.R")
source("functions/matchDGP.R")
source("functions/wATT.R")
source("functions/matching.R")
source("functions/matchest.R")
source("functions/regsynth.R")
source("functions/regsynthpath.R")
source("functions/TZero.R")
source("functions/synthObj.R")
source("functions/perm.test.R")
### 0. Generate data
data = matchDGP(n=100,p=10,Ry=.5,Rd=.2,a=1)
X = data$X; y = data$y; d = data$d
X0 = t(X[d==0,]); X1 = t(X[d==1,]); V = diag(ncol(X))
Y0 = y[d==0]; Y1 = y[d==1]; n0 = sum(1-d)
### 2. Compute ATET on the original sample
sol1 = regsynth(X0,X1,y[d==0],y[d==1],V,.1)
print(sol1$ATT)
### 3. Inference based on Permutation Tests
# Reshuffle the treatment
ptest = perm.test(d,y,X,V,.1,R=1000)
p.val = (sum(ptest$theta.hat < ptest$theta.reshuffled)+1)/1001
ptest = data.frame(val=ptest$theta.reshuffled)
ggplot(ptest, aes(x=val)) +
geom_histogram(binwidth = .06, alpha=.5, position='identity',fill="steelblue", aes(y = ..density..)) +
scale_x_continuous(name="Estimated ATET") +
ggtitle("Distribution of permutated ATETs") +
geom_vline(xintercept = ptest$theta.hat, colour="darkorchid3", size=1) +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.position="none")
ptest$theta.hat
ptest = perm.test(d,y,X,V,.1,R=1000)
p.val = (sum(ptest$theta.hat < ptest$theta.reshuffled)+1)/1001
titer = data.frame(val=ptest$theta.reshuffled)
ggplot(titer, aes(x=val)) +
geom_histogram(binwidth = .06, alpha=.5, position='identity',fill="steelblue", aes(y = ..density..)) +
scale_x_continuous(name="Estimated ATET") +
ggtitle("Distribution of permutated ATETs") +
geom_vline(xintercept = ptest$theta.hat, colour="darkorchid3", size=1) +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.position="none")
p.val
set.seed(12071990)
R = 100
Results <- matrix(ncol=1, nrow=R)
t_start <- Sys.time()
pb <- txtProgressBar(style = 3)
for(r in 1:R){
### 0. Generate data
data = matchDGP(n=50,p=5,Ry=.5,Rd=.2)
X = data$X; y = data$y; d = data$d; V = diag(ncol(X))
### Perform test
ptest = perm.test(d,y,X,V,.1,R=1000)
### 6. Third step: ATT estimation
Results[r,] <- c(ptest.p.val)
setTxtProgressBar(pb, r/R)
}
close(pb)
print(Sys.time()-t_start)
ptest$p.val
set.seed(12071990)
R = 100
Results <- matrix(ncol=1, nrow=R)
t_start <- Sys.time()
pb <- txtProgressBar(style = 3)
for(r in 1:R){
### 0. Generate data
data = matchDGP(n=50,p=5,Ry=.5,Rd=.2)
X = data$X; y = data$y; d = data$d; V = diag(ncol(X))
### Perform test
ptest = perm.test(d,y,X,V,.1,R=1000)
### 6. Third step: ATT estimation
Results[r,] <- c(ptest$p.val)
setTxtProgressBar(pb, r/R)
}
close(pb)
print(Sys.time()-t_start)
Results
sum(Results<.05)
## 4. A Monte Carlo experiment
set.seed(12071990)
R = 1000
Results <- matrix(ncol=1, nrow=R)
t_start <- Sys.time()
pb <- txtProgressBar(style = 3)
for(r in 1:R){
### 0. Generate data
data = matchDGP(n=50,p=5,Ry=.5,Rd=.2)
X = data$X; y = data$y; d = data$d; V = diag(ncol(X))
### Perform test
ptest = perm.test(d,y,X,V,.1,R=100)
### 6. Third step: ATT estimation
Results[r,] <- c(ptest$p.val)
setTxtProgressBar(pb, r/R)
}
close(pb)
print(Sys.time()-t_start)
sum(Results < .05)/R
### 4. A Monte Carlo experiment
set.seed(12071990)
R = 5000
Results <- matrix(ncol=1, nrow=R)
t_start <- Sys.time()
pb <- txtProgressBar(style = 3)
for(r in 1:R){
### 0. Generate data
data = matchDGP(n=50,p=5,Ry=.5,Rd=.2)
X = data$X; y = data$y; d = data$d; V = diag(ncol(X))
### Perform test
ptest = perm.test(d,y,X,V,.1,R=1000)
### 6. Third step: ATT estimation
Results[r,] <- c(ptest$p.val)
setTxtProgressBar(pb, r/R)
}
close(pb)
print(Sys.time()-t_start)
sum(Results < .05)/R
list(ptest)
titer = data.frame(val=ptest$theta.reshuffled)
ggplot(titer, aes(x=val)) +
geom_histogram(binwidth = .06, alpha=.5, position='identity',fill="steelblue", aes(y = ..density..)) +
scale_x_continuous(name="Estimated ATET") +
ggtitle("Distribution of permutated ATETs") +
geom_vline(xintercept = ptest$theta.hat, colour="darkorchid3", size=1) +
theme(plot.title = element_text(lineheight=.8, face="bold"),legend.position="none")
ptest$p.val
as.data.frame(Results)
ddd=as.data.frame(Results)
head(dd)
head(ddd)
ggplot(as.data.frame(Results), aes(x=V1)) +
geom_histogram(binwidth = .06, alpha=.5, position='identity',fill="steelblue", aes(y = ..density..)) +
scale_x_continuous(name="Estimated ATET")
6036/714
library(Ecdat)
data(BudgetFood)
list(BudgetFood)
head(BudgetFood)
FoodData[,"foodexp"] = BudgetFood[,"wfood"]*BudgetFood[,"totexp"]
FoodData = BudgetFood
FoodData[,"foodexp"] = BudgetFood[,"wfood"]*BudgetFood[,"totexp"]
head(fooddata)
head(DoodData)
head(FoodData)
FoodData = FoodData[,-"foodexp"]
FoodData = FoodData[,2:7]
head(FoodData)
library(foreign)
write.dta(FoodData, "//ensae.fr/dfsgenes/MKI/InformationsPermanents/Domaine SCOLARITE A L'ENSAE/Enseignants stat/Cours CI/Econométrie CI/TDs")
write.dta(FoodData, "//ulysse/users/JL.HOUR/1A_These")
write.dta(FoodData, "//ulysse/users/JL.HOUR/1A_These/fooddata.dat")
head(FoodData)
33+22+21+30
33/106
22/106
21/106
31+21+20
62/106
25/106
10/106
9/106
58+8+9+24
3700/1300
